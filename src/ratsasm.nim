# This is just an example to get you started. A typical binary package
# uses this file as the main entry point of the application.

import
  std/[strutils, os],
  parser, tokens

type OutputMode {.pure.} = enum
  Raw, Verilog, Hex, BinAddressed, HexWithComments, IntelHex, IntelMif

const
  MODE: OutputMode = OutputMode.BinAddressed

proc toVerilog(prog: array[256, byte]): string =
  result = "parameter PROGRAM = {"
  for p in prog:
    result &= "8'h" & p.toHex(2) & ", "
  result = result[0..^3] & "};"

proc toHex(prog: array[256, byte]): string =
  for p in prog:
    result &= p.toHex(2) & '\n'

proc toBinAddressed(prog: array[256, byte]): string =
  for i, p in prog:
    result &= i.toHex(2) & ": " & p.int.toBin(8) & " = " & p.toHex(2) & '\n'

proc toHexWithComments(prog: array[128, uint16], toks: seq[Token]): string =
  for i in 0..<prog.len():
    let line = if i >= toks.len(): "" else: toks[i].info.str
    result &= i.toHex(2) & "::0x" & prog[i].toHex(4) & " :: " & line

proc checksum(line: string): byte =
  let line = line[1..^1]
  var i = 0
  while i < line.len():
    let s = line[i] & line[i+1]
    result += s.parseHexInt().byte
    i.inc(2)
  result = (not result) + 1

proc toIntelHex(prog: array[256, byte]): string =
  for i, p in prog:
    let line = ":01" & i.toHex(4) & "00" & p.toHex(2)
    result &= line & line.checksum().toHex(2) & '\n'
  result &= ":00000001FF"

proc toMif(prog: array[256, byte]): string =
  result = """
-- Auto-generated by RATS Assembler
DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN"""
  for i, p in prog:
    result &= i.toHex(2) & " : " & p.toHex(2) & ";\n"
  result &= "END;"

when isMainModule:
  let args = os.commandLineParams()
  if args.len() != 2:
    echo "Usage: ratsasm [source file] [destination]"
    quit(-1)

  let (bin, toks) = parseAsm(readFile(args[0]))

  let asByte = cast[ptr array[256, byte]](addr bin)[]

  when MODE == OutputMode.Raw:
    writeFile(args[1], asByte)
  elif MODE == OutputMode.Verilog:
    writeFile(args[1], asByte.toVerilog())
  elif MODE == OutputMode.Hex:
    writeFile(args[1], asByte.toHex())
  elif MODE == OutputMode.BinAddressed:
    writeFile(args[1], asByte.toBinAddressed())
  elif MODE == OutputMode.HexWithComments:
    writeFile(args[1], bin.toHexWithComments(toks))
  elif MODE == OutputMode.IntelHex:
    writeFile(args[1], asByte.toIntelHex())
  elif MODE == OutputMode.IntelMif:
    writeFile(args[1], asByte.toMif())

  echo args[0], " built successfully!"